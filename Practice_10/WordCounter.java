// assignment 10
// pair p134
// Singh, Bhavneet
// singhb
// Wang, Shiyu
// shiyu

import java.util.*;

import tester.Tester;

/**
 * Class to count frequencies of the words generated by an iterator.
 */
public class WordCounter {
    
    /*Template
     * Fields
     * No fields
     * 
     * Methods
     * this.countWords(Iterator<Word>)........     -- void
     * this.words().......           -- int
     * this.sortedInsert(T, ArrayList<T>, Comparator<T>).....           -- void
     * this.sortedInsertHelp(T, ArrayList<T>, Comparator<T>, int)...    -- void
     * this.insertionSort(ArrayList<T>, Comparator<T>)....              -- void
     * this.insertionSortHelper(ArrayList<T>, Comparator<T>)...         -- void
     * this.printWords(int)....                                         -- void 
     * 
     * Method for fields
     * built-in
     * 
     */
    
    
    //new StringIterator of macbeth
    StringIterator macbeth = new StringIterator("Macbeth.txt");
    
 // new Array list of freq and words
    ArrayList<Word> words;
    
    public WordCounter() {
        this.words = new ArrayList<Word>();
    }
    
    //Effect:
    /** record the words generated by the given iterator */
    public void countWords(Iterator<Word> it) {
        
        while (it.hasNext()) {
       
            Word type = it.next();
         
            if (words.contains(type))
            
        for (Word w : words) {
            if (w.equals(type))
            w.increment();
        }
        
        else { 
            this.words.add(type);
            }
        
        }
        
    }
    

    /** Count the number of different words in this Counter */
    public int words() {
        return this.words.size();
    }
    

    // Effect: insert the given item into the given ArrayList based on the given
    // ordering in its appropriate place in the list
    public <T> void sortedInsert(T item, ArrayList<T> alist,
            Comparator<T> comp) {
        this.sortedInsertHelp(item, alist, comp, 0);
    }

    // Effect: insert the given item into the given ArrayList based on the 
    // given ordering; places the item at the given index if it is supposed
    // to be there
    public <T> void sortedInsertHelp(T item, ArrayList<T> alist,
            Comparator<T> comp, int ind) {

        if (alist.isEmpty())
            alist.add(item);

        else if ((alist.size() > ind) &&
                (comp.compare(alist.get(ind), item) <= 0))
            this.sortedInsertHelp(item, alist, comp, (ind + 1));

        else if ((alist.size() > ind) &&
                (comp.compare(alist.get(ind), item) > 0))
            alist.add(ind, item);

        else alist.add(item);
    }

    // Effect: sort the ArrayList based on the given ordering
    public <T> void insertionSort(ArrayList<T> alist,
            Comparator<T> comp) {
        
        if (!alist.isEmpty())
        this.insertionSortHelper(alist, comp);

    }

    // Effect: sort the given ArrayList based on the given ordering
    public <T> void insertionSortHelper(ArrayList<T> alist,
            Comparator<T> comp) {
        T it = alist.get(0);
        alist.remove(it);
        this.insertionSort(alist, comp);
        this.sortedInsert(it, alist, comp);
    }
    
    
    // Comparator for words by frequency
    public class WordsByFreq implements Comparator<Word> {
        
        /*
         * Template:
         * Fields:
         * No fields
         * 
         * methods:
         * this.compare(Word, Words)....   -- int
         * 
         * methods for fields:
         * Biult-in
         * 
         */
        
        // Compares two words by frequency, high to low
        public int compare(Word w1, Word w2) {
           return w2.freq - w1.freq;
        }
    }

    /** Print the words and their frequencies for the top n words */
    public void printWords(int n) {

        WordsByFreq comp = new WordsByFreq();
        
        this.insertionSort(words, comp);
        
       for (int i = 0; !(i == n); i++) {
           System.out.println(words.get(i).toString());
       }
    }
    

}
